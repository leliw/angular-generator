import { DataSource } from '@angular/cdk/collections';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { catchError, map } from 'rxjs/operators';
import { Observable, merge, of, throwError } from 'rxjs';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';

export interface ${Item}Item {
#foreach($field in $fields.keySet())
  ${field}: $fields.get($field);
#end
}

/**
 * Data source for the ${Item} view. This class should
 * encapsulate all logic for fetching and manipulating the displayed data
 * (including sorting, pagination, and filtering).
 */
export class ${Component}DataSource extends DataSource<${item}Item> {
  apiUrl : string = 'http://localhost:8080${apiPath}';
  data: ${item}Item[] = [];
  paginator: MatPaginator | undefined;
  sort: MatSort | undefined;

  constructor(private http: HttpClient) {
    super();
  }

  /**
   * Connect this data source to the table. The table will only update when
   * the returned stream emits new items.
   * @returns A stream of the items to be rendered.
   */
  connect(): Observable<${item}Item[]> {
    if (this.paginator && this.sort) {
      // Combine everything that affects the rendered data into one update
      // stream for the data-table to consume.
      return merge(of(this.data), this.paginator.page, this.sort.sortChange,
        this.http.get<${item}Item[]>(this.apiUrl).pipe(map(data => this.data = data)))
        .pipe(map(() => {
          return this.getPagedData(this.getSortedData([...this.data ]));
        }));
    } else {
      throw Error('Please set the paginator and sort on the data source before connecting.');
    }
  }

  /**
   *  Called when the table is being destroyed. Use this function, to clean up
   * any open connections or free any held resources that were set up during connect.
   */
  disconnect(): void {}

  /**
   * Paginate the data (client-side). If you're using server-side pagination,
   * this would be replaced by requesting the appropriate data from the server.
   */
  private getPagedData(data: ${item}Item[]): ${item}Item[] {
    if (this.paginator) {
      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
      return data.splice(startIndex, this.paginator.pageSize);
    } else {
      return data;
    }
  }

  /**
   * Sort the data (client-side). If you're using server-side sorting,
   * this would be replaced by requesting the appropriate data from the server.
   */
  private getSortedData(data: ${item}Item[]): ${item}Item[] {
    if (!this.sort || !this.sort.active || this.sort.direction === '') {
      return data;
    }

    return data.sort((a, b) => {
      const isAsc = this.sort?.direction === 'asc';
      switch (this.sort?.active) {
#foreach($field in $fields.keySet())
#if($fields.get($field) == 'number')
        case '${field}': return compare(+a.${field}, +b.${field}, isAsc);
#else
        case '${field}': return compare(a.${field}, b.${field}, isAsc);
#end
#end      
        default: return 0;
      }
    });
  }

  private handleError(error: HttpErrorResponse) {
    if (error.status === 0) {
      // A client-side or network error occurred. Handle it accordingly.
      console.error('An error occurred:', error.error);
    } else {
      // The backend returned an unsuccessful response code.
      // The response body may contain clues as to what went wrong.
      console.error(
        `Backend returned code ${error.status}, ` +
        `body was: ${error.error}`);
    }
    // Return an observable with a user-facing error message.
    return throwError(
      'Something bad happened; please try again later.');
  }
  
  public addRowData(row_obj){
    console.log(row_obj);
    this.http.post<${item}Item>(this.apiUrl, row_obj)
    .pipe(
      catchError(this.handleError)
    )
    .subscribe((saved) => { 
      console.log(saved); 
      this.data.push({
#foreach($field in $fields.keySet())
        ${field}: saved.${field},
#end       
      });
      this.paginator.page.emit();
    }
    );
  }

  public updateRowData(row_obj){
    console.log(row_obj);
    this.http.put<${item}Item>(this.apiUrl + '/' + row_obj.${id}, row_obj)
    .pipe(
      catchError(this.handleError)
    )
    .subscribe(() => { 
      this.data = this.data.filter((value,key)=>{
        if(value.${id} == row_obj.${id}) {
#foreach($field in $fields.keySet())
#if($field != $id)
          value.${field} = row_obj.${field};
#end
#end
        }
        return true; 
      });
      this.paginator.page.emit();
    }
    );
  }
    
  public deleteRowData(row_obj) {
    this.http.delete(this.apiUrl + '/' + row_obj.${id})
    .pipe(
      catchError(this.handleError)
    )
    .subscribe(() => {
      this.data = this.data.filter((value,key)=>{
        return value.${id} != row_obj.${id};
      });
      this.paginator.page.emit();
    }
    );    
  }
}

/** Simple sort comparator for example ID/Name columns (for client-side sorting). */
function compare(a: string | number, b: string | number, isAsc: boolean): number {
  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);
}
